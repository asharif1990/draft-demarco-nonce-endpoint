



Network Working Group                                        G. D. Marco
Internet-Draft                                               Independent
Intended status: Informational                          17 November 2023
Expires: 20 May 2024


                        OAuth 2.0 Nonce Endpoint
                  draft-demarco-nonce-endpoint-latest

Abstract

   This document defines the nonce endpoint for the implementations
   based on OAuth 2.0 [RFC6749], allowing a client to request and obtain
   server-generated opaque nonces from a server, such as an OAuth 2.0
   Authorization Server.

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://peppelinux.github.io/draft-demarco-nonce-endpoint/draft-
   demarco-nonce-endpoint.html.  Status information for this document
   may be found at https://datatracker.ietf.org/doc/draft-demarco-nonce-
   endpoint/.

   Source for this draft and an issue tracker can be found at
   https://github.com/peppelinux/draft-demarco-nonce-endpoint.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 20 May 2024.

Copyright Notice

   Copyright (c) 2023 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  Terminology
   4.  Nonce Endpoint
   5.  Errors
   6.  Nonce Payload Non-normative Examples
   7.  Security Considerations
   8.  IANA Considerations
   9.  References
     9.1.  Normative References
     9.2.  Informative References
   Acknowledgments
   Author's Address

1.  Introduction

   This specification defines a method for a client to query an endpoint
   in a server, such as an OAuth 2.0 authorization server, to request
   and obtain a new nonce.  The nonce is an arbitrary and randomic
   string used only once.

   OAuth 2.0 deployments of this endpoint must use encryption for the
   issuance of the nonces to provide confidentiality of the information
   carried within the nonces, these can be, for instance: the origin of
   the nonce, time of issuance and expiration, audiences; allowing its
   secure use within infrastructures that do not use shared memory
   between multiple servers to store and share the issued nonces within
   their domain.

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

4.  Nonce Endpoint

   The Nonce endpoint is an HTTP endpoint that is capable of issuing new
   nonces.  The endpoint MUST be protected by TLS [RFC5246].  A Client
   requests a nonce by sending an HTTP GET request to the nonce endpoint
   and the server responds with a JSON object [RFC7159] containing the
   nonce.

   Below is a non normative example of the HTTP Request made by a Client
   to a nonce endpoint provided by a server.

   GET /nonce HTTP/1.1 Host: server.example.com

   The server responds with a JSON object containing the nonce.  The
   response MUST use the HTTP Header Content-Type value set to
   application/json and MUST provide a JSON object containing the member
   nonce.  Below a non-normative example of the response of the server,
   providing a nonce.

   ```` HTTP/1.1 200 OK Content-Type: application/json

   { "nonce": "d2JhY2NhbG91cmVqdWFuZGFt" } ```` The nonce value MAY use
   Base64-urlencoded string or a JSON Web Token [RFC7519].

   The nonce value MUST be encrypted with an encryption key that:

   *  MUST NOT be provided to the Client by the server.

   *  MUST NOT be in control of the Client.

5.  Errors

   When a server requires the use of nonces in the request for a
   specific resource and the Client doesn't provide it in its request,
   the server MUST return an HTTP response with the 400 status and an
   error field with the value "nonce_required".

   This HTTP response MUST also contain the Nonce-Endpoint-URI HTTP
   header, with the value of the server nonce endpoint where the Client
   can obtain a new nonce.

   The Client MUST use the HTTPs URL provided in the Nonce-Endpoint-URI
   HTTP header to request a new nonce before renewing the previous
   request, in cases where the request can be renewed.

   Below is a non-normative example of an error response issued by a
   server that requires the nonce in the Client request and provides, at
   the same time, the nonce endpoint in the form of HTTPs URL:

   ```` HTTP/1.1 400 Bad Request Nonce-Endpoint-URI:
   http://server.example.org/nonce-endpoint

   { "error": "nonce_required", "error_description": "Authorization
   server requires the nonce in the request" } ````

6.  Nonce Payload Non-normative Examples

   The nonce payload MAY be a JSON object and include several
   attributes.  Below are provided some non-normative examples of how
   the decrypted and serialized nonce payload may be represented:

   { "iss": "https://issuer.example.com", "iat": 1615908701, "exp":
   1615995101, "source_endpoint": "https://service.example.com/nonce-
   endpoint", "aud": "https://service.example.com/endpoint" } Please
   note that the values represented in the previous examples may depend
   on domain specific requirements and implementation.

7.  Security Considerations

   The nonce endpoint MUST be protected by TLS to prevent eavesdropping
   and man-in-the-middle attacks, therefore the practices defined in
   [BCP195] must be followed.

   The server MUST securely generate and store the symmetric key used to
   encrypt the nonce.  The key MUST NOT be provided to the Client.

   The robustness of the encryption key plays a crucial role in the
   security of the nonce endpoint.  The following considerations should
   be taken into account:

   1.  Key Strength: The symmetric key used for encrypting the nonce
       should be of sufficient length to resist brute-force attacks.
       For example, a key length of 256 bits is currently considered to
       provide a good level of security.

   2.  Key Management: The symmetric key should be securely managed.  It
       should be securely generated, stored, and revoked.  Access to the
       key should be strictly controlled and limited to authorized
       entities only.

   3.  Key Rotation: Regular key rotation is a good practice to mitigate
       the risk of key compromise.  The frequency of key rotation
       depends on the specific requirements and threat model, but a
       common practice is to rotate keys frequently.

   4.  Randomness: The symmetric key, when used, should be generated
       using a secure random number generator to ensure its randomness.
       Predictable keys can be easily guessed by attackers.

   5.  Secure Transmission: If the symmetric key needs to be transmitted
       over a network, it should be securely transmitted using secure
       protocols such as TLS.

   6.  Backup and Recovery: Secure backup and recovery procedures should
       be in place for the symmetric key.  This is to ensure that the
       key can be recovered in case of loss, while preventing
       unauthorized access to the backup.

   The security of the nonce endpoint is only as strong as the security
   of the encryption key.  Therefore, proper key management practices
   are essential.

8.  IANA Considerations

   This document has no IANA actions.

9.  References

9.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC5246]  Dierks, T. and E. Rescorla, "The Transport Layer Security
              (TLS) Protocol Version 1.2", RFC 5246,
              DOI 10.17487/RFC5246, August 2008,
              <https://www.rfc-editor.org/rfc/rfc5246>.

   [RFC6749]  Hardt, D., Ed., "The OAuth 2.0 Authorization Framework",
              RFC 6749, DOI 10.17487/RFC6749, October 2012,
              <https://www.rfc-editor.org/rfc/rfc6749>.

   [RFC7159]  Bray, T., Ed., "The JavaScript Object Notation (JSON) Data
              Interchange Format", RFC 7159, DOI 10.17487/RFC7159, March
              2014, <https://www.rfc-editor.org/rfc/rfc7159>.

   [RFC7519]  Jones, M., Bradley, J., and N. Sakimura, "JSON Web Token
              (JWT)", RFC 7519, DOI 10.17487/RFC7519, May 2015,
              <https://www.rfc-editor.org/rfc/rfc7519>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

9.2.  Informative References

   [BCP195]   Moriarty, K. and S. Farrell, "Deprecating TLS 1.0 and TLS
              1.1", BCP 195, RFC 8996, March 2021.

              Sheffer, Y., Saint-Andre, P., and T. Fossati,
              "Recommendations for Secure Use of Transport Layer
              Security (TLS) and Datagram Transport Layer Security
              (DTLS)", BCP 195, RFC 9325, November 2022.

Acknowledgments

   TODO acknowledge.

Author's Address

   Giuseppe De Marco
   Independent
   Email: demarcog83@gmail.com
