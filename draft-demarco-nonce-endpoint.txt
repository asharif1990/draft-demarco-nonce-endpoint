



Network Working Group                                        G. D. Marco
Internet-Draft                                               Independent
Intended status: Informational                          18 November 2023
Expires: 21 May 2024


                        OAuth 2.0 Nonce Endpoint
                  draft-demarco-nonce-endpoint-latest

Abstract

   This document defines the nonce endpoint for OAuth 2.0
   implementations [RFC6749] allowing a client to request and obtain
   server-generated opaque nonces from a server.

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://peppelinux.github.io/draft-demarco-nonce-endpoint/draft-
   demarco-nonce-endpoint.html.  Status information for this document
   may be found at https://datatracker.ietf.org/doc/draft-demarco-nonce-
   endpoint/.

   Source for this draft and an issue tracker can be found at
   https://github.com/peppelinux/draft-demarco-nonce-endpoint.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 21 May 2024.

Copyright Notice

   Copyright (c) 2023 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  Terminology
   4.  Requirements
   5.  Nonce Request
   6.  Nonce Response
   7.  Nonce Endpoint Discovery
   8.  Non-normative Examples
   9.  Security Considerations
   10. Considerations about nonce vs. jti
   11. IANA Considerations
   12. References
     12.1.  Normative References
     12.2.  Informative References
   Acknowledgments
   Author's Address

1.  Introduction

   This specification defines a method for a client to request and
   obtain a nonce from a server that requires it to protect a
   communication against replay attacks.

   The nonce endpoint defined in this document outlines a storage-less
   solution for infrastructures that do not use shared memories between
   multiple nodes.  The OAuth 2.0 deployments that uses the nonce
   endpoint described in this specification are able to use the nonces
   issued by a trusted party, by mean of cryptographic mechanisms, and
   verify information such as the origin of the nonce, the time of
   issuance, the time of expiration and its audiences.

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  Terminology

   Nonce:  A random or pseudo-random number that is generated for a
      specific use, typically for cryptographic communication.  The
      Nonce is used to protect against replay attacks by ensuring that a
      message or data cannot be reused or retransmitted.  The term
      "nonce" stands for "number used once" and it MUST be unique within
      some scope.

   Nonce Issuer:  The entity that generates and provides the Nonce.  In
      the context of OAuth 2.0, the Nonce Issuer would typically be the
      Authorization Server.

   Nonce Endpoint:  The HTTP endpoint provided by the Nonce Issuer for
      the issuance of the Nonces.

4.  Requirements

   The Nonce Endpoint satisfies the following requirements:

   *  It MUST be secured by TLS [RFC5246];

   *  It MUST generate a Nonce in response to each request, such that
      under no circumstances can two identical nonces be generated by
      the Nonce Issuer in response to two different requests, whether
      these occur simultaneously or at different times.

   The Nonce value satisfies the following requirements:

   *  It MUST be purely opaque to the Clients that receive these;

   *  It MUST be encrypted with an encryption key that:

      -  MUST NOT be provided by the Nonce Issuer to the Client;

      -  MUST NOT be provided by the Nonce Issuer to any other entity
         outside the domain where the Nonce Issuer belongs.

   The Nonce Issuer value satisfies the following requirements:

   *  The Nonce Issuer, and the servers within the Nonce Issuer's
      domain, have the ability to decrypt the Nonce and access its
      decrypted contents.  No other entity can decrypt or know the
      decrypted contents of the Nonce.

5.  Nonce Request

   When a Client needs a Nonce, it sends an HTTP GET request to the
   Nonce Endpoint.

   Below is a non normative example of the HTTP Request made by a Client
   to the Nonce Endpoint.

   GET /nonce HTTP/1.1
   Host: server.example.com

6.  Nonce Response

   The Nonce Endpoint provides a Nonce to the Client, encapsulated
   within a JSON object [RFC7159].  The response MUST use the HTTP
   Header Content-Type value set to application/json and MUST provide in
   the response message a JSON object with the member nonce.

   Below is a non-normative example of the response given by a Nonce
   Endpoint:

   HTTP/1.1 200 OK
   Content-Type: application/json

   {
     "nonce": "d2JhY2NhbG91cmVqdWFuZGFt"
   }

7.  Nonce Endpoint Discovery

   When a server requires the use of a Nonce in the request for a
   specific resource and the Client doesn't provide it in its request,
   the server MUST return an HTTP response with the HTTP status code 400
   and an error field with the value set to "nonce_required".

   This response MUST also contain the Nonce-Endpoint-URI HTTP header,
   with the value set to the URL corresponding to the Nonce Endpoint,
   where the Client SHOULD request and fetch a new Nonce.

   The Client SHOULD use the endpoint provided in the Nonce-Endpoint-URI
   HTTP header to request a Nonce.  Once the Nonce is reveived, the
   Client MAY renew the request to the server, including the obtained
   Nonce.

   Below is a non-normative example of an error response issued by a
   server that requires the Nonce in the Client request, the response
   informs the Client about the Nonce Endpoint where the Nonce can be
   requested:

   HTTP/1.1 400 Bad Request
   Nonce-Endpoint-URI: http://server.example.org/nonce-endpoint

   {
     "error": "nonce_required",
     "error_description":
       "Authorization server requires the nonce in the request"
   }

   In cases where, for some reasons, a correctly issued Nonce can no
   longer be considered valid by the server that receives it, the server
   MUST return the generic error "nonce_required" reporting the same
   description as "error_description", as if the Nonce had not been
   received.  The cases when an issued Nonce is considered no longer
   valid MAY be caused by the rotation of the encryption keys, its
   expiration or other specific conditions internal to an
   implementation.

8.  Non-normative Examples

   The decrypted Nonce payload may use different formats and encodings,
   according to the different implementations that requires it, and
   contains any kind of implementation-specific attributes.

   Below are provided some non-normative examples, describing how a
   decrypted and JSON serialized Nonce payload may appear:

   {
     "iss": "https://issuer.example.com",
     "iat": 1615908701,
     "exp": 1615995101,
     "source_endpoint": "https://issuer.example.com/nonce-endpoint",
     "aud": [
       "https://service.example.com/endpoint",
       "https://another.example.com/cb"
     ]
   }

   Please note that the values represented in the previous examples may
   depend on domain specific requirements and implementation and these
   MUST NOT be intended as normative.

9.  Security Considerations

   The Nonce Endpoint MUST be protected by TLS to prevent eavesdropping
   and man-in-the-middle attacks, therefore the practices defined in
   [BCP195] should be followed.

   The Nonce Issuer MUST securely generate and store the encryption key
   used to encrypt the Nonce.  The robustness of the encryption key
   plays a crucial role in the security of the Nonce Endpoint.  The
   following considerations should be taken into account:

   1.  *Key Strength*: The cryptographic key used for encrypting the
       Nonce should be of sufficient length to resist brute-force
       attacks.  For example, a key length of 256 bits is currently
       considered to provide a good level of security.

   2.  *Key Management*: The cryptographic key should be securely
       managed.  It should be securely generated, stored, and revoked.
       Access to the key should be strictly controlled and limited to
       authorized entities only.

   3.  *Key Rotation*: Regular key rotation is a good practice to
       mitigate the risk of key compromise.  The frequency of key
       rotation depends on the specific requirements and threat model,
       but a common practice is to rotate keys frequently.

   4.  *Randomness*: The cryptographic key, when used, should be
       generated using a secure random number generator to ensure its
       randomness.  Predictable keys can be easily guessed by attackers.

   5.  *Secure Transmission*: If the cryptographic key needs to be
       transmitted over a network and within the Nonce Issuer domain, it
       must be securely transmitted using secure protocols such as TLS.

   6.  *Backup and Recovery*: Secure backup and recovery procedures
       should be in place for the cryptographic keys.  This is to ensure
       that the key can be recovered in case of loss, while preventing
       unauthorized access to the backup.

   The security of the Nonce Endpoint is only as strong as the security
   of the encryption key.  Therefore, proper key management practices
   are essential.

10.  Considerations about nonce vs. jti

   In this section are provided some consideration about the main
   differences and scopes about the nonce in comparison to the jti claim
   defined in [RFC7519].

   TBD.

11.  IANA Considerations

   This document has no IANA actions.

12.  References

12.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC5246]  Dierks, T. and E. Rescorla, "The Transport Layer Security
              (TLS) Protocol Version 1.2", RFC 5246,
              DOI 10.17487/RFC5246, August 2008,
              <https://www.rfc-editor.org/rfc/rfc5246>.

   [RFC6749]  Hardt, D., Ed., "The OAuth 2.0 Authorization Framework",
              RFC 6749, DOI 10.17487/RFC6749, October 2012,
              <https://www.rfc-editor.org/rfc/rfc6749>.

   [RFC7159]  Bray, T., Ed., "The JavaScript Object Notation (JSON) Data
              Interchange Format", RFC 7159, DOI 10.17487/RFC7159, March
              2014, <https://www.rfc-editor.org/rfc/rfc7159>.

   [RFC7519]  Jones, M., Bradley, J., and N. Sakimura, "JSON Web Token
              (JWT)", RFC 7519, DOI 10.17487/RFC7519, May 2015,
              <https://www.rfc-editor.org/rfc/rfc7519>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

12.2.  Informative References

   [BCP195]   Moriarty, K. and S. Farrell, "Deprecating TLS 1.0 and TLS
              1.1", BCP 195, RFC 8996, March 2021.

              Sheffer, Y., Saint-Andre, P., and T. Fossati,
              "Recommendations for Secure Use of Transport Layer
              Security (TLS) and Datagram Transport Layer Security
              (DTLS)", BCP 195, RFC 9325, November 2022.

Acknowledgments

   TODO acknowledge.

Author's Address

   Giuseppe De Marco
   Independent
   Email: demarcog83@gmail.com
